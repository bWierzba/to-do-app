{"version":3,"sources":["components/AddTask.jsx","components/Task.jsx","components/TaskList.jsx","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","handleDate","e","setState","target","value","handleText","handleImportance","handleClick","length","props","add","alert","maxDate","this","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","React","Component","Task","task","active","importance","finishDate","style","color","done","delete","finish","toLocaleString","TaskList","tasks","filter","sort","a","b","toLowerCase","activeTasks","map","key","doneTasks","App","counter","deleteTask","changeTaskStatus","index","findIndex","newDate","getTime","addTask","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.833c45ee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass AddTask extends React.Component {\r\n  minDate = new Date().toISOString().slice(0, 10)\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate\r\n  }\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value\r\n    })\r\n  }\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value\r\n    })\r\n  }\r\n  handleImportance = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    })\r\n  }\r\n  handleClick = () => {\r\n    const { text, date, checked } = this.state\r\n    if (text.length > 2) {\r\n\r\n\r\n      const add = this.props.add(text, date, checked)\r\n      if (add) {\r\n        this.setState({\r\n          text: \"\",\r\n          checked: false,\r\n          date: this.minDate\r\n        })\r\n      }\r\n    } else {\r\n      alert('za krótki opis taska')\r\n    }\r\n  }\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1\r\n    maxDate = maxDate + '-12-31'\r\n    return (\r\n      <>\r\n        <div className='form'>\r\n          <input type=\"text\" placeholder='dodaj zadanie' value={this.state.text} onChange={this.handleText} />\r\n          <input type=\"checkbox\" checked={this.state.checked} id='important' onChange={this.handleImportance} />\r\n          <label htmlFor=\"important\" id='important'> priorytet</label>\r\n          <br />\r\n          <label htmlFor=\"date\">do kiedy zrobić </label>\r\n          <input type=\"date\" id='date' value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate} />\r\n          <br />\r\n          <button onClick={this.handleClick}>dodaj</button>\r\n        </div>\r\n        <hr />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTask","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n\r\n  const style = {\r\n    color: 'red'\r\n  }\r\n\r\n  const { date, active, importance, finishDate } = props.task\r\n\r\n\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={importance ? style : null}>{props.task.text}</strong> - do {props.task.date}\r\n          <span> </span>\r\n          <button onClick={() => props.done(props.task.id)}>zrobione</button>\r\n          <span> </span>\r\n          <button onClick={() => props.delete(props.task.id)}>x</button>\r\n        </p>\r\n      </div >\r\n    )\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString()\r\n    return (\r\n      <p>\r\n        <strong>{props.task.text}</strong><em> (zrobić do {date})</em>\r\n        <br />\r\n        zrobione {finish} <button onClick={() => props.delete(props.task.id)}>x</button>\r\n      </p>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Task","import React from 'react';\r\nimport Task from './Task'\r\nconst TaskList = (props) => {\r\n\r\n  const active = props.tasks.filter(task => task.active)\r\n  const done = props.tasks.filter(task => !task.active)\r\n\r\n  done.sort((a, b) => {\r\n    if (a.finishDate > b.finishDate) {\r\n      return -1\r\n    }\r\n    if (a.finishDate < b.finishDate) {\r\n      return 1\r\n    }\r\n    return 0\r\n  })\r\n\r\n  active.sort((a, b) => {\r\n    if (a.text.toLowerCase() < b.text.toLowerCase()) {\r\n      return -1\r\n    }\r\n    if (a.text.toLowerCase() > b.text.toLowerCase()) {\r\n      return 1\r\n    }\r\n    return 0\r\n  })\r\n\r\n  const activeTasks = active.map(task => <Task key={task.id} task={task} done={props.done} delete={props.delete} />)\r\n  const doneTasks = done.map(task => <Task key={task.id} task={task} done={props.done} delete={props.delete} />)\r\n\r\n  return (\r\n    <>\r\n      <div className='active'>\r\n        <h1>lista tasków</h1>\r\n        {activeTasks.length > 0 ? activeTasks : <p>brak zadań</p>}\r\n      </div>\r\n      <hr />\r\n      <div>\r\n        <h1>taski zrobione ({done.length})</h1>\r\n        {done.length > 5 && <p>wyświetlonych jest 5 ostatnich zdań</p>}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TaskList","import React from 'react';\nimport './App.css';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\n\nclass App extends React.Component {\n  counter = 6\n  state = {\n    tasks: [\n      // {\n      //   id: 0,\n      //   text: 'siądz na puszke montera',\n      //   date: '2022-02-15',\n      //   importance: false,\n      //   active: true,\n      //   finishDate: null\n      // },\n      // {\n      //   id: 1,\n      //   text: 'siądz na butle od vanisha',\n      //   date: '2021-02-15',\n      //   importance: false,\n      //   active: true,\n      //   finishDate: null\n      // },\n      // {\n      //   id: 2,\n      //   text: 'siądz na wiertare',\n      //   date: '2023-02-15',\n      //   importance: false,\n      //   active: true,\n      //   finishDate: null\n      // },\n      // {\n      //   id: 3,\n      //   text: 'siądz na swojej starej',\n      //   date: '2028-02-15',\n      //   importance: false,\n      //   active: true,\n      //   finishDate: null\n      // },\n      // {\n      //   id: 4,\n      //   text: 'siądz na tysiaku',\n      //   date: '2028-02-15',\n      //   importance: false,\n      //   active: true,\n      //   finishDate: null\n      // },\n      // {\n      //   id: 5,\n      //   text: 'siądz na sztolec',\n      //   date: '2021-02-15',\n      //   importance: true,\n      //   active: true,\n      //   finishDate: null\n      // }\n    ]\n  }\n\n  deleteTask = (id) => {\n    let tasks = [...this.state.tasks]\n    tasks = tasks.filter(task => task.id !== id)\n    this.setState({ tasks })\n  }\n\n  changeTaskStatus = (id) => {\n    let tasks = [...this.state.tasks]\n    const index = tasks.findIndex(task => task.id === id)\n    tasks[index].active = false\n    const newDate = new Date().getTime()\n    tasks[index].finishDate = newDate\n    this.setState({ tasks })\n  }\n\n  addTask = (text, date, importance) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      importance,\n      active: true,\n      finishDate: null\n    }\n    this.counter++\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n    return true\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AddTask add={this.addTask} />\n        <TaskList tasks={this.state.tasks} done={this.changeTaskStatus} delete={this.deleteTask} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}